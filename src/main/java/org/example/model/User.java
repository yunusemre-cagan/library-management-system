package org.example.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;
import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;
import org.example.model.enums.MembershipStatus; // Ensure this enum is correctly placed and imported

import java.time.LocalDate;
import java.time.format.DateTimeFormatter; // For formatting date in toString
import java.util.Objects;

/**
 * Represents a user (member) of the library system.
 * Contains details such as user ID, name, contact information, and membership status.
 */
public class User {
    // --- Fields ---
    private String userId;          // Unique identifier for the user (e.g., a UUID or a system-generated ID)
    private String firstName;       // User's first name
    private String lastName;        // User's last name
    private String phoneNumber;     // User's phone number (optional)
    private String email;           // User's email address (should be unique)
    private String address;         // User's physical address (optional)

    // Annotation for Jackson to correctly serialize/deserialize LocalDate to/from JSON string
    // using the "dd-MM-yyyy" pattern.
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "dd-MM-yyyy") // Note: Pattern changed to dd-MM-yyyy
    @JsonSerialize(using = LocalDateSerializer.class)
    @JsonDeserialize(using = LocalDateDeserializer.class)
    private LocalDate registrationDate; // Date when the user registered with the library

    private MembershipStatus status;    // Current membership status of the user (e.g., ACTIVE, PASSIVE)

    // --- Constructors ---

    /**
     * Default constructor.
     * Required by Jackson ObjectMapper for JSON deserialization.
     */
    public User() {
        // Jackson needs a no-arg constructor
    }

    /**
     * Constructs a new User object with specified details.
     * The registration date is set to the current date, and the initial status is set to ACTIVE.
     * The userId can be null if it's intended to be auto-generated by the service layer.
     *
     * @param userId      The unique ID for the user. If null, it might be generated by a service.
     * @param firstName   The user's first name.
     * @param lastName    The user's last name.
     * @param phoneNumber The user's phone number (can be null or empty).
     * @param email       The user's email address.
     * @param address     The user's physical address (can be null or empty).
     */
    public User(String userId, String firstName, String lastName, String phoneNumber, String email, String address) {
        this.userId = userId; // Service layer might set this if null (e.g., using UUID)
        this.firstName = firstName;
        this.lastName = lastName;
        this.phoneNumber = phoneNumber;
        this.email = email;
        this.address = address;
        this.registrationDate = LocalDate.now(); // Set registration to current date
        this.status = MembershipStatus.ACTIVE;   // Default status for a new user
    }

    // --- Getters and Setters ---
    // Standard getter and setter methods for all fields.

    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public LocalDate getRegistrationDate() {
        return registrationDate;
    }

    public void setRegistrationDate(LocalDate registrationDate) {
        this.registrationDate = registrationDate;
    }

    public MembershipStatus getStatus() {
        return status;
    }

    public void setStatus(MembershipStatus status) {
        this.status = status;
    }

    // --- Overridden Methods ---

    /**
     * Returns a string representation of the User object, formatted for readability.
     * Dates are formatted as "dd.MM.yyyy".
     *
     * @return A string containing the user's details.
     */
    @Override
    public String toString() {
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd.MM.yyyy"); // Date formatter for display
        StringBuilder sb = new StringBuilder();
        sb.append("------------------------------------\n");
        sb.append(" User ID: ").append(userId != null ? userId : "N/A").append("\n");
        sb.append(" Name: ").append(firstName != null ? firstName : "").append(" ").append(lastName != null ? lastName : "").append("\n");
        sb.append(" Email: ").append(email != null ? email : "N/A").append("\n");
        sb.append(" Phone: ").append(phoneNumber != null && !phoneNumber.isEmpty() ? phoneNumber : "N/A").append("\n");
        sb.append(" Address: ").append(address != null && !address.isEmpty() ? address : "N/A").append("\n");
        sb.append(" Registration Date: ").append(registrationDate != null ? registrationDate.format(dtf) : "N/A").append("\n");
        sb.append(" Membership Status: ").append(status != null ? status : "N/A").append("\n");
        sb.append("------------------------------------");
        return sb.toString();
    }

    /**
     * Compares this User object to another object for equality.
     * Two users are considered equal if their userIds are the same.
     *
     * @param o The object to compare with.
     * @return True if the objects are equal, false otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true; // Check for same instance
        if (o == null || getClass() != o.getClass()) return false; // Check for null and class type
        User user = (User) o; // Cast to User type
        // Equality is based on the userId field
        return Objects.equals(userId, user.userId);
    }

    /**
     * Returns a hash code value for the User object.
     * The hash code is based on the userId field.
     *
     * @return A hash code value for this object.
     */
    @Override
    public int hashCode() {
        // Hash code generation based on the userId field
        return Objects.hash(userId);
    }
}